import sys, glob

# path for file generated by Apache Thrift Compiler
sys.path.append('gen-py')
# add path where built Apache Thrift libraries are
sys.path.insert(0, glob.glob('thrift-0.10.0/lib/py/build/lib.*')[0])

from first import MyFirstService
from first.ttypes import *
from first.constants import *

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer, TNonblockingServer
from thrift import TMultiplexedProcessor


class MyFirstHandler(MyFirstService.Iface):
    def __init__(self):
        self.service_name = 'FirstHandler'
        pass

    def log(self, filename):
        # implement log here
        pass
    def multiply(self, number1, number2):
        print "multiplication process here"
        print "start sleeping"
        import time
        time.sleep(10)
        return number1 * number2
    def get_log_size(self, filename):
        pass

class MySecondHandler(MyFirstService.Iface):
    def __init__(self):
        self.service_name = 'SecondHandler'
        pass

    def log(self, filename):
        # implement log here
        pass

    def multiply(self, number1, number2):
        print "multiplication process-2 here"
        print "start sleeping"
        import time
        time.sleep(10)
        return number1 * number2 *number1

    def get_log_size(self, filename):
        pass


if __name__ == '__main__':

    handler = MyFirstHandler()
    processor = MyFirstService.Processor(handler)

    sec_handler = MySecondHandler()
    sec_processor2 = MyFirstService.Processor(sec_handler)

    multiprocessor = TMultiplexedProcessor.TMultiplexedProcessor()
    multiprocessor.registerProcessor('FirstHandler', processor)
    multiprocessor.registerProcessor('SecondHandler', sec_processor2)


    transport = TSocket.TServerSocket(port=9090)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()


    server = TServer.TThreadPoolServer(multiprocessor, transport, tfactory, pfactory)
# server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

    print ("start listening..")
    server.serve()
    print ("end")
