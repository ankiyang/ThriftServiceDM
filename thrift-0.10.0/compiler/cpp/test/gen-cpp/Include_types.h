/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Include_TYPES_H
#define Include_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "ThriftTest_types.h"




class IncludeTest;


class IncludeTest : public virtual ::apache::thrift::TBase {
 public:

  IncludeTest(const IncludeTest&);
  IncludeTest& operator=(const IncludeTest&);
  IncludeTest() {
  }

  virtual ~IncludeTest() throw();
   ::thrift::test::Bools bools;

  void __set_bools(const  ::thrift::test::Bools& val);

  bool operator == (const IncludeTest & rhs) const
  {
    if (!(bools == rhs.bools))
      return false;
    return true;
  }
  bool operator != (const IncludeTest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncludeTest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IncludeTest &a, IncludeTest &b);

inline std::ostream& operator<<(std::ostream& out, const IncludeTest& obj)
{
  obj.printTo(out);
  return out;
}



#endif
